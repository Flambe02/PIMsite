/**
 * Script de nettoyage complet du module blog Supabase
 * Supprime la table blog_articles et toutes les r√©f√©rences
 */

import { createClient } from '@supabase/supabase-js';

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  console.error('V√©rifiez que NEXT_PUBLIC_SUPABASE_URL et NEXT_PUBLIC_SUPABASE_ANON_KEY sont d√©finies');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function cleanupSupabaseBlog() {
  console.log('üßπ Nettoyage complet du module blog Supabase...');
  console.log('=' .repeat(60));

  try {
    // 1. V√©rifier si la table existe
    console.log('\nüìã √âtape 1: V√©rification de la table blog_articles');
    
    const { data: testData, error: testError } = await supabase
      .from('blog_articles')
      .select('id')
      .limit(1);

    if (testError && testError.message.includes('relation "blog_articles" does not exist')) {
      console.log('‚úÖ Table blog_articles n\'existe pas - d√©j√† supprim√©e');
    } else if (testError) {
      console.error('‚ùå Erreur lors de la v√©rification:', testError);
      return;
    } else {
      console.log('‚ö†Ô∏è Table blog_articles existe - suppression...');
      
      // 2. Supprimer tous les articles
      console.log('\nüóëÔ∏è √âtape 2: Suppression de tous les articles');
      
      const { error: deleteError } = await supabase
        .from('blog_articles')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000'); // Supprimer tous les articles

      if (deleteError) {
        console.error('‚ùå Erreur lors de la suppression des articles:', deleteError);
      } else {
        console.log('‚úÖ Tous les articles supprim√©s');
      }

      // 3. Supprimer la table
      console.log('\nüóëÔ∏è √âtape 3: Suppression de la table blog_articles');
      
      const dropTableSQL = `
        DROP TABLE IF EXISTS blog_articles CASCADE;
        DROP INDEX IF EXISTS idx_blog_articles_country;
        DROP INDEX IF EXISTS idx_blog_articles_published_at;
        DROP INDEX IF EXISTS idx_blog_articles_slug;
      `;

      const { error: dropError } = await supabase.rpc('exec_sql', { sql: dropTableSQL });
      
      if (dropError) {
        console.error('‚ùå Erreur lors de la suppression de la table:', dropError);
        console.log('üí° Veuillez supprimer manuellement la table blog_articles dans Supabase');
      } else {
        console.log('‚úÖ Table blog_articles supprim√©e');
      }
    }

    // 4. V√©rifier les politiques RLS
    console.log('\nüîí √âtape 4: Nettoyage des politiques RLS');
    
    const cleanupPoliciesSQL = `
      DROP POLICY IF EXISTS "Public read access" ON blog_articles;
      DROP POLICY IF EXISTS "Admin write access" ON blog_articles;
    `;

    const { error: policiesError } = await supabase.rpc('exec_sql', { sql: cleanupPoliciesSQL });
    
    if (policiesError) {
      console.log('‚ö†Ô∏è Impossible de supprimer les politiques (table d√©j√† supprim√©e)');
    } else {
      console.log('‚úÖ Politiques RLS supprim√©es');
    }

    console.log('\n‚úÖ Nettoyage Supabase termin√©!');

  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
  }
}

// Ex√©cution principale
async function main() {
  console.log('üöÄ D√©marrage du nettoyage du module blog Supabase');
  console.log('=' .repeat(60));
  
  await cleanupSupabaseBlog();
  
  console.log('\n‚ú® Nettoyage termin√©!');
  console.log('\nüìù Prochaines √©tapes:');
  console.log('1. Supprimer les fichiers de code blog Supabase');
  console.log('2. Installer Sanity.io');
  console.log('3. Configurer le nouveau syst√®me de blog');
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  main().catch(console.error);
}

export { cleanupSupabaseBlog }; 