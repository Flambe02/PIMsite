#!/usr/bin/env tsx

/**
 * Test du dashboard frontend avec authentification simul√©e
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// Charger les variables d'environnement
config({ path: '.env.local' });
config({ path: '.env' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

// Client avec cl√© anonyme (comme le frontend)
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testDashboardFrontend() {
  console.log('üß™ Test du dashboard frontend avec authentification...\n');

  try {
    // 1. Test sans authentification
    console.log('üîç Test 1: Acc√®s sans authentification');
    const { data: noAuthData, error: noAuthError } = await supabase
      .from('holerites')
      .select('*')
      .limit(1);

    if (noAuthError) {
      console.log('‚ùå Erreur sans authentification:', noAuthError.message);
    } else if (!noAuthData || noAuthData.length === 0) {
      console.log('‚úÖ Politique RLS fonctionne: aucune donn√©e accessible sans authentification');
    } else {
      console.log('‚ö†Ô∏è Probl√®me: donn√©es accessibles sans authentification');
    }

    // 2. Test avec authentification simul√©e
    console.log('\nüîê Test 2: Authentification simul√©e');
    
    // Cr√©er une session simul√©e pour l'utilisateur de test
    const testUserId = '2854e862-6b66-4e7a-afcc-e3749c3d12ed';
    
    // Note: Cette approche ne fonctionne pas car nous ne pouvons pas forcer l'authentification
    // depuis un script Node.js. Le probl√®me est que le frontend a besoin d'une vraie session.
    
    console.log('‚ö†Ô∏è Impossible de simuler l\'authentification depuis un script Node.js');
    console.log('üí° Le probl√®me est que le frontend a besoin d\'une vraie session utilisateur');

    // 3. V√©rification de la structure des donn√©es
    console.log('\nüìä Test 3: V√©rification de la structure des donn√©es');
    
    // Utiliser la cl√© de service pour v√©rifier les donn√©es
    const supabaseService = createClient(supabaseUrl, process.env.SUPABASE_SERVICE_ROLE_KEY!);
    
    const { data: serviceData, error: serviceError } = await supabaseService
      .from('holerites')
      .select('*')
      .eq('user_id', testUserId)
      .order('created_at', { ascending: false })
      .limit(1)
      .single();

    if (serviceError) {
      console.error('‚ùå Erreur service:', serviceError);
      return;
    }

    if (!serviceData) {
      console.log('‚ö†Ô∏è Aucune donn√©e trouv√©e pour l\'utilisateur de test');
      return;
    }

    console.log('‚úÖ Donn√©es trouv√©es via service key');
    console.log('üìä Structure des donn√©es:');
    console.log('- ID:', serviceData.id);
    console.log('- User ID:', serviceData.user_id);
    console.log('- Created:', serviceData.created_at);
    console.log('- Structured Data:', !!serviceData.structured_data);

    // 4. Analyse de la structure des donn√©es
    const structuredData = serviceData.structured_data;
    if (structuredData) {
      console.log('\nüîç Analyse de structured_data:');
      
      const finalData = structuredData.final_data || {};
      const recommendations = structuredData.recommendations || {};
      
      console.log('- Sal√°rio Bruto:', finalData.salario_bruto);
      console.log('- Sal√°rio L√≠quido:', finalData.salario_liquido);
      console.log('- Statut:', finalData.statut);
      console.log('- Employee Name:', finalData.employee_name);
      console.log('- Company Name:', finalData.company_name);
      console.log('- Recommandations:', recommendations.recommendations?.length || 0);
      console.log('- Score d\'optimisation:', recommendations.score_optimisation);
    }

    // 5. Diagnostic du probl√®me
    console.log('\nüéØ Diagnostic du probl√®me:');
    console.log('='.repeat(50));
    console.log('‚úÖ Les donn√©es existent dans la base');
    console.log('‚úÖ Les politiques RLS sont configur√©es');
    console.log('‚ùå L\'utilisateur n\'est pas authentifi√© dans le frontend');
    console.log('‚ùå Le dashboard ne peut pas acc√©der aux donn√©es');
    
    console.log('\nüí° Solutions possibles:');
    console.log('1. Connecter l\'utilisateur de test dans le frontend');
    console.log('2. Cr√©er une session de test pour le d√©veloppement');
    console.log('3. Utiliser un mode de d√©veloppement sans RLS');
    console.log('4. Ajouter des donn√©es de test publiques');

    // 6. Test de connexion utilisateur
    console.log('\nüîê Test 4: Tentative de connexion utilisateur de test');
    
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: 'test-dashboard@example.com',
      password: 'test123456'
    });

    if (authError) {
      console.log('‚ùå Erreur de connexion:', authError.message);
      console.log('üí° L\'utilisateur de test n\'existe pas ou le mot de passe est incorrect');
    } else {
      console.log('‚úÖ Connexion r√©ussie:', authData.user?.id);
      
      // Test d'acc√®s aux donn√©es apr√®s connexion
      const { data: userData, error: userError } = await supabase
        .from('holerites')
        .select('*')
        .eq('user_id', authData.user!.id)
        .limit(1);

      if (userError) {
        console.log('‚ùå Erreur d\'acc√®s apr√®s connexion:', userError.message);
      } else if (!userData || userData.length === 0) {
        console.log('‚ö†Ô∏è Aucune donn√©e trouv√©e pour l\'utilisateur connect√©');
      } else {
        console.log('‚úÖ Donn√©es accessibles apr√®s connexion!');
        console.log('üìä Nombre de holerites:', userData.length);
      }
    }

  } catch (error) {
    console.error('‚ùå Erreur critique lors du test:', error);
  }
}

// Ex√©cuter le test
testDashboardFrontend().catch(console.error); 