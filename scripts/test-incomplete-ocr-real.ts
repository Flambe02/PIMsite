import 'dotenv/config';
import { scanAnalysisService } from '../lib/services/scanAnalysisService';

async function testIncompleteOCRReal() {
  console.log('üîç TEST OCR INCOMPLET R√âEL');
  console.log('============================');

  // Simuler l'OCR incomplet que vous recevez r√©ellement
  const incompleteOCRText = `
    Recibo de Pagamento de Sal√°rio
    janeiro/2017
    
    CNPJ: 00.000.000/0000-00
    
    C√≥digo: 587
    Admiss√£o: 21/12/1930
    
    CBO: 351410 Escriv√£o judicial
    Emp. Local Depto. Setor Se√ß√£o Fl. Dependentes: 3
    
    C√≥d. Descri√ß√£o Refer√™ncia Vencimentos Descontos
    101 SALARIO 220 horas 15.345,00
    102 I.N.S.S. 11% 608,44
    103 IMPOSTO DE RENDA 28% 2.669,28
    105 PENSAO ALIMENTICIA 1.300,00
    
    Total de Vencimentos: 15.345,00
    Total de Descontos: 4.577,72
    Valor L√≠quido: 10.767,28
    
    Sal√°rio Base: 15.345,00
    Sal. Contr. INSS: 5.531,31
    Base C√°lc. FGTS: 15.345,00
    FGTS do M√™s: 1.227,60
    Base C√°lc. IRRF: 12.867,79
    Faixa IRRF: 05
  `;

  console.log('üìù Texte OCR incomplet (simulation du probl√®me r√©el):');
  console.log(incompleteOCRText);
  console.log();

  console.log('üîç Informations manquantes dans l\'OCR:');
  console.log('‚ùå "Nome do Funcion√°rio: Marcos" - MANQUANT');
  console.log('‚ùå "Empresa: Aprender Excel Ltda." - MANQUANT');
  console.log('‚úÖ "PENSAO ALIMENTICIA 1.300,00" - PR√âSENT');
  console.log();

  // Test de l'analyse IA avec extraction flexible
  console.log('ü§ñ Test analyse IA avec extraction flexible...');
  try {
    const result = await scanAnalysisService.analyzeScan(incompleteOCRText, 'br');
    
    if (result.success) {
      console.log('‚úÖ Analyse r√©ussie');
      console.log('üìä Donn√©es structur√©es:');
      console.log(JSON.stringify(result.structuredData, null, 2));
      
      // V√©rifier les noms
      console.log('\nüîç V√©rification des noms:');
      console.log(`- Nom employ√©: "${result.structuredData.employee_name}"`);
      console.log(`- Nom entreprise: "${result.structuredData.company_name}"`);
      console.log(`- Cargo: "${result.structuredData.position}"`);
      
      // V√©rifier la pension alimentaire
      const outros = result.structuredData.outros || [];
      const pensionAlimentaire = outros.find((item: any) => 
        item.nome && item.nome.toLowerCase().includes('pens√£o aliment√≠cia')
      );
      
      console.log('\nüí∞ V√©rification pension alimentaire:');
      if (pensionAlimentaire) {
        console.log(`- Trouv√©e: ${pensionAlimentaire.nome}`);
        console.log(`- Valeur: R$ ${pensionAlimentaire.valor}`);
      } else {
        console.log('‚ùå Pension alimentaire non trouv√©e');
      }
      
      // Analyser pourquoi les noms ne sont pas trouv√©s
      console.log('\nüîç Analyse du texte pour les noms:');
      const textLower = incompleteOCRText.toLowerCase();
      
      // Chercher des noms potentiels
      const potentialNames = ['marcos', 'jo√£o', 'maria', 'pedro', 'ana'];
      const foundNames = potentialNames.filter(name => textLower.includes(name));
      console.log('Noms potentiels trouv√©s:', foundNames);
      
      // Chercher des entreprises potentielles
      const potentialCompanies = ['aprender excel', 'excel', 'ltda', 's.a.'];
      const foundCompanies = potentialCompanies.filter(company => textLower.includes(company));
      console.log('Entreprises potentielles trouv√©es:', foundCompanies);
      
    } else {
      console.log('‚ùå √âchec analyse:', result.error);
    }
  } catch (error) {
    console.log('‚ùå Erreur analyse:', error);
  }

  console.log('\n‚úÖ Test termin√©');
}

testIncompleteOCRReal().catch(console.error); 