import 'dotenv/config';
import { scanAnalysisService } from '../lib/services/scanAnalysisService';

async function testIncompleteOCR() {
  console.log('üîç TEST OCR INCOMPLET');
  console.log('=====================');

  // Simuler le texte OCR incomplet que vous recevez r√©ellement
  const incompleteOCRText = `
    Recibo de Pagamento de Sal√°rio
    janeiro/2017
    
    CNPJ: 00.000.000/0000-00
    
    C√≥digo: 587
    Admiss√£o: 21/12/1930
    
    CBO: 351410 Escriv√£o judicial
    Emp. Local Depto. Setor Se√ß√£o Fl. Dependentes: 3
    
    C√≥d. Descri√ß√£o Refer√™ncia Vencimentos Descontos
    101 SALARIO 220 horas 15.345,00
    102 I.N.S.S. 11% 608,44
    103 IMPOSTO DE RENDA 28% 2.669,28
    105 PENSAO ALIMENTICIA 1.300,00
    
    Total de Vencimentos: 15.345,00
    Total de Descontos: 4.577,72
    Valor L√≠quido: 10.767,28
  `;

  console.log('üìù Texte OCR incomplet (simulation):');
  console.log(incompleteOCRText);
  console.log();

  console.log('üîç Analyse du texte incomplet...');
  console.log('‚ùå Manquant: "Nome do Funcion√°rio" et "Empresa"');
  console.log();

  // Test de l'analyse IA
  console.log('ü§ñ Test analyse IA avec texte incomplet...');
  try {
    const result = await scanAnalysisService.analyzeScan(incompleteOCRText, 'br');
    
    if (result.success) {
      console.log('‚úÖ Analyse r√©ussie');
      console.log('üìä Donn√©es structur√©es:');
      console.log(JSON.stringify(result.structuredData, null, 2));
      
      // V√©rifier les noms
      console.log('\nüîç V√©rification des noms:');
      console.log(`- Nom employ√©: "${result.structuredData.employee_name}"`);
      console.log(`- Nom entreprise: "${result.structuredData.company_name}"`);
      console.log(`- Cargo: "${result.structuredData.position}"`);
      
      // V√©rifier si les noms sont "N√£o identificado"
      const expectedForIncomplete = {
        employee_name: 'N√£o identificado',
        company_name: 'N√£o identificado',
        position: 'Escriv√£o judicial' // Celui-ci devrait √™tre trouv√©
      };
      
      console.log('\n‚úÖ Comparaison avec attendu (texte incomplet):');
      Object.entries(expectedForIncomplete).forEach(([key, expected]) => {
        const actual = result.structuredData[key];
        const isCorrect = actual === expected;
        console.log(`${isCorrect ? '‚úÖ' : '‚ùå'} ${key}: "${actual}" (attendu: "${expected}")`);
      });
      
    } else {
      console.log('‚ùå √âchec analyse:', result.error);
    }
  } catch (error) {
    console.log('‚ùå Erreur analyse:', error);
  }

  console.log('\n‚úÖ Test termin√©');
}

testIncompleteOCR().catch(console.error); 