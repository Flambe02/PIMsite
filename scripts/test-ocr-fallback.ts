#!/usr/bin/env tsx

/**
 * Test de l'OCR avec fallback pour v√©rifier le process complet
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// Charger les variables d'environnement
config({ path: '.env.local' });
config({ path: '.env' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

// Client avec cl√© anonyme
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testOcrWithFallback() {
  console.log('üß™ Test de l\'OCR avec fallback...\n');

  try {
    // 1. Test avec fallback activ√©
    console.log('üîç Test 1: Upload avec fallback activ√©');
    console.log('URL de test: http://localhost:3001/br/dashboard');
    console.log('Param√®tre: ?test=true');
    
    // 2. Instructions pour tester
    console.log('\nüìã Instructions pour tester:');
    console.log('1. Allez sur http://localhost:3001/br/dashboard');
    console.log('2. Cliquez sur "Upload Holerite"');
    console.log('3. S√©lectionnez n\'importe quel fichier');
    console.log('4. L\'OCR √©chouera mais le fallback sera activ√©');
    console.log('5. Vous devriez voir les donn√©es de test s\'afficher');
    console.log('6. V√©rifiez que le dashboard affiche les donn√©es');

    // 3. Test programmatique
    console.log('\nüîç Test 2: V√©rification des donn√©es apr√®s upload avec fallback');
    
    const { data: existingData, error } = await supabase
      .from('holerites')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(1)
      .single();

    if (error) {
      console.log('‚ùå Erreur de r√©cup√©ration:', error.message);
      return;
    }

    if (!existingData) {
      console.log('‚ö†Ô∏è Aucune donn√©e trouv√©e');
      return;
    }

    console.log('üìä Donn√©es trouv√©es:');
    console.log('- ID:', existingData.id);
    console.log('- User ID:', existingData.user_id);
    console.log('- Created:', existingData.created_at);

    // 4. V√©rifier si ce sont des donn√©es de fallback
    const structuredData = existingData.structured_data;
    const finalData = structuredData?.final_data || {};
    
    console.log('\nüîç Test 3: V√©rification des donn√©es de fallback');
    console.log('- Employee Name:', finalData.employee_name);
    console.log('- Company Name:', finalData.company_name);
    console.log('- Sal√°rio Bruto:', finalData.salario_bruto);
    console.log('- Sal√°rio L√≠quido:', finalData.salario_liquido);

    const isFallback = finalData.employee_name === 'Test User' || 
                      finalData.company_name === 'Test Company Ltda' ||
                      finalData.salario_bruto === 5000;

    if (isFallback) {
      console.log('‚úÖ DONN√âES DE FALLBACK D√âTECT√âES (mode test)');
      console.log('‚úÖ Le dashboard devrait afficher ces donn√©es de test');
      console.log('‚úÖ Le process complet fonctionne avec fallback');
    } else {
      console.log('‚ùå DONN√âES R√âELLES D√âTECT√âES');
      console.log('‚ùå Le fallback ne fonctionne pas comme attendu');
    }

    // 5. R√©sum√©
    console.log('\nüéØ R√©sum√©:');
    console.log('='.repeat(50));
    if (isFallback) {
      console.log('‚úÖ Succ√®s: Fallback fonctionne correctement');
      console.log('‚úÖ Le process complet est op√©rationnel');
      console.log('‚úÖ Le dashboard affiche les donn√©es de test');
    } else {
      console.log('‚ùå Probl√®me: Fallback ne fonctionne pas');
      console.log('‚ùå V√©rifiez la configuration du mode test');
    }

  } catch (error) {
    console.error('‚ùå Erreur critique lors du test:', error);
  }
}

// Ex√©cuter le test
testOcrWithFallback().catch(console.error); 