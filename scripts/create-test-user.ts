#!/usr/bin/env tsx

/**
 * Script pour cr√©er un utilisateur de test avec un vrai UUID
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// Charger les variables d'environnement
config({ path: '.env.local' });
config({ path: '.env' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

// Utiliser la cl√© de service pour contourner les politiques RLS
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function createTestUser() {
  console.log('üë§ Cr√©ation de l\'utilisateur de test...\n');

  try {
    const testUserEmail = "test-dashboard@example.com";
    const testUserPassword = "testpassword123";
    
    console.log('üìß Email:', testUserEmail);
    console.log('üîë Mot de passe:', testUserPassword);

    // 1. Cr√©er l'utilisateur avec Supabase Auth
    const { data: authData, error: authError } = await supabase.auth.admin.createUser({
      email: testUserEmail,
      password: testUserPassword,
      email_confirm: true,
      user_metadata: {
        name: 'Test User',
        role: 'test'
      }
    });

    if (authError) {
      console.error('‚ùå Erreur cr√©ation utilisateur:', authError);
      return null;
    }

    const userId = authData.user.id;
    console.log('‚úÖ Utilisateur cr√©√© avec succ√®s');
    console.log('- User ID:', userId);
    console.log('- Email:', authData.user.email);

    // 2. V√©rifier que l'utilisateur existe
    const { data: userData, error: userError } = await supabase.auth.admin.getUserById(userId);
    
    if (userError) {
      console.error('‚ùå Erreur r√©cup√©ration utilisateur:', userError);
    } else {
      console.log('‚úÖ Utilisateur v√©rifi√©:', userData.user.email);
    }

    // 3. Instructions pour utiliser l'utilisateur
    console.log('\nüéØ Instructions pour utiliser l\'utilisateur de test:');
    console.log('='.repeat(60));
    console.log('1. Connectez-vous avec:');
    console.log(`   Email: ${testUserEmail}`);
    console.log(`   Mot de passe: ${testUserPassword}`);
    console.log('');
    console.log('2. Utilisez cet User ID dans les scripts:');
    console.log(`   const testUserId = "${userId}";`);
    console.log('');
    console.log('3. Testez le dashboard et l\'upload de holerites');

    return userId;

  } catch (error) {
    console.error('‚ùå Erreur critique lors de la cr√©ation:', error);
    return null;
  }
}

// Ex√©cuter la cr√©ation
createTestUser().catch(console.error); 