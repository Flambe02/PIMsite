#!/usr/bin/env tsx

/**
 * Script pour tester l'int√©gration compl√®te du blog
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

// Charger les variables d'environnement
config({ path: '.env.local' });
config({ path: '.env' });

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testBlogIntegration() {
  console.log('üîç Test de l\'int√©gration compl√®te du blog...');

  try {
    // Test 1: R√©cup√©ration des articles par pays
    console.log('\nüìã Test 1: R√©cup√©ration des articles pour le Br√©sil');
    const { data: articlesBR, error: errorBR } = await supabase
      .from('blog_articles')
      .select('*')
      .eq('country', 'br')
      .order('published_at', { ascending: false });

    if (errorBR) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des articles BR:', errorBR);
    } else {
      console.log(`‚úÖ ${articlesBR?.length || 0} articles trouv√©s pour le Br√©sil`);
      articlesBR?.forEach((article, index) => {
        console.log(`   ${index + 1}. ${article.title}`);
      });
    }

    // Test 2: R√©cup√©ration d'un article sp√©cifique
    console.log('\nüìã Test 2: R√©cup√©ration d\'un article sp√©cifique');
    const { data: article, error: errorArticle } = await supabase
      .from('blog_articles')
      .select('*')
      .eq('slug', 'entenda-seu-holerite-guia-completo-funcionarios-clt')
      .single();

    if (errorArticle) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'article:', errorArticle);
    } else {
      console.log(`‚úÖ Article trouv√©: ${article.title}`);
      console.log(`   Contenu: ${article.content_markdown?.substring(0, 100)}...`);
    }

    // Test 3: V√©rification de la structure des donn√©es
    console.log('\nüìã Test 3: V√©rification de la structure des donn√©es');
    if (articlesBR && articlesBR.length > 0) {
      const sampleArticle = articlesBR[0];
      const requiredFields = ['id', 'title', 'slug', 'content_markdown', 'excerpt', 'country', 'published_at'];
      const missingFields = requiredFields.filter(field => !sampleArticle[field]);
      
      if (missingFields.length === 0) {
        console.log('‚úÖ Tous les champs requis sont pr√©sents');
      } else {
        console.log(`‚ùå Champs manquants: ${missingFields.join(', ')}`);
      }
    }

    // Test 4: Test de l'URL de l'application
    console.log('\nüìã Test 4: Test de l\'URL de l\'application');
    try {
      const response = await fetch('http://localhost:3000/br/blog');
      if (response.ok) {
        console.log('‚úÖ L\'application r√©pond correctement');
        const html = await response.text();
        if (html.includes('Blog PIM')) {
          console.log('‚úÖ La page du blog se charge correctement');
        } else {
          console.log('‚ö†Ô∏è La page se charge mais le contenu semble diff√©rent');
        }
      } else {
        console.log(`‚ùå L'application retourne un code d'erreur: ${response.status}`);
      }
    } catch (error) {
      console.log('‚ùå Impossible de contacter l\'application:', error);
    }

    console.log('\nüéâ Tests d\'int√©gration termin√©s!');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  testBlogIntegration();
} 