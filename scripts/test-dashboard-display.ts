#!/usr/bin/env tsx

/**
 * Test de l'affichage des donn√©es dans le dashboard
 * V√©rifie que les donn√©es extraites par l'API sont correctement affich√©es
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// Charger les variables d'environnement
config({ path: '.env.local' });
config({ path: '.env' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

// Utiliser la cl√© de service pour contourner RLS
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testDashboardDisplay() {
  console.log('üß™ Test de l\'affichage des donn√©es dans le dashboard...\n');

  try {
    // 1. R√©cup√©rer l'utilisateur de test
    const testUserId = '2854e862-6b66-4e7a-afcc-e3749c3d12ed';
    
    console.log('üë§ V√©rification de l\'utilisateur de test...');
    const { data: user, error: userError } = await supabase
      .from('auth.users')
      .select('id, email')
      .eq('id', testUserId)
      .single();

    if (userError) {
      console.log('‚ö†Ô∏è Utilisateur de test non trouv√©, utilisation directe de l\'ID');
    } else {
      console.log('‚úÖ Utilisateur de test trouv√©:', user.email);
    }

    // 2. R√©cup√©rer les donn√©es de holerites pour l'utilisateur de test
    console.log('\nüìä R√©cup√©ration des holerites pour l\'utilisateur de test...');
    const { data: holerites, error: holeritesError } = await supabase
      .from('holerites')
      .select('*')
      .eq('user_id', testUserId)
      .order('created_at', { ascending: false })
      .limit(5);

    if (holeritesError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des holerites:', holeritesError);
      return;
    }

    if (!holerites || holerites.length === 0) {
      console.log('‚ö†Ô∏è Aucun holerite trouv√© pour l\'utilisateur de test');
      console.log('üí° V√©rifiez que les donn√©es de test ont √©t√© ins√©r√©es');
      return;
    }

    console.log(`‚úÖ ${holerites.length} holerites trouv√©s pour l'utilisateur de test`);

    // 3. Analyser le dernier holerite
    const latestHolerite = holerites[0];
    console.log('\nüìä Dernier holerite trouv√©:', {
      id: latestHolerite.id,
      created_at: latestHolerite.created_at,
      user_id: latestHolerite.user_id
    });

    // 4. Analyser la structure des donn√©es
    const structuredData = latestHolerite.structured_data;
    console.log('\nüîç Structure des donn√©es:');
    console.log('structured_data:', JSON.stringify(structuredData, null, 2));

    // 5. Extraire les donn√©es principales
    const finalData = structuredData?.final_data || {};
    const recommendations = structuredData?.recommendations || {};

    console.log('\nüìà Donn√©es extraites:');
    console.log('- Sal√°rio Bruto:', finalData.salario_bruto);
    console.log('- Sal√°rio L√≠quido:', finalData.salario_liquido);
    console.log('- Descontos:', finalData.descontos);
    console.log('- Statut:', finalData.statut);
    console.log('- Pays:', finalData.pays);
    console.log('- Employee Name:', finalData.employee_name);
    console.log('- Company Name:', finalData.company_name);
    console.log('- Position:', finalData.position);

    // 6. Calculer l'efficacit√©
    const salarioBruto = Number(finalData.salario_bruto) || 0;
    const salarioLiquido = Number(finalData.salario_liquido) || 0;
    const eficiencia = salarioBruto > 0 ? ((salarioLiquido / salarioBruto) * 100).toFixed(1) : '0.0';
    
    console.log('\nüìä Calculs:');
    console.log('- Efici√™ncia calcul√©e:', `${eficiencia}%`);
    console.log('- Descontos calcul√©s:', salarioBruto - salarioLiquido);

    // 7. V√©rifier les recommandations
    console.log('\nü§ñ Recommandations IA:');
    console.log('- Resume Situation:', recommendations.resume_situation || 'Non disponible');
    console.log('- Nombre de recommandations:', recommendations.recommendations?.length || 0);
    console.log('- Score d\'optimisation:', recommendations.score_optimisation || 0);

    if (recommendations.recommendations) {
      console.log('\nüìã D√©tail des recommandations:');
      recommendations.recommendations.forEach((rec: any, index: number) => {
        console.log(`${index + 1}. ${rec.categorie} - ${rec.titre}`);
        console.log(`   Impact: ${rec.impact}, Priorit√©: ${rec.priorite}`);
        console.log(`   Description: ${rec.description}`);
      });
    }

    // 8. V√©rifier la coh√©rence des donn√©es
    console.log('\n‚úÖ V√©rification de coh√©rence:');
    const isDataComplete = salarioBruto > 0 && salarioLiquido > 0;
    const hasRecommendations = recommendations.recommendations && recommendations.recommendations.length > 0;
    const hasEmployeeInfo = finalData.employee_name && finalData.company_name;

    console.log('- Donn√©es salariales compl√®tes:', isDataComplete ? '‚úÖ' : '‚ùå');
    console.log('- Recommandations pr√©sentes:', hasRecommendations ? '‚úÖ' : '‚ùå');
    console.log('- Informations employ√© pr√©sentes:', hasEmployeeInfo ? '‚úÖ' : '‚ùå');

    // 9. R√©sum√©
    console.log('\nüéØ R√©sum√© du test:');
    if (isDataComplete && hasRecommendations && hasEmployeeInfo) {
      console.log('‚úÖ Toutes les donn√©es sont pr√©sentes et coh√©rentes');
      console.log('‚úÖ Le dashboard devrait afficher correctement les informations');
    } else {
      console.log('‚ö†Ô∏è Certaines donn√©es sont manquantes ou incompl√®tes');
      console.log('‚ö†Ô∏è V√©rifiez la structure des donn√©es dans Supabase');
    }

    // 10. Test d'acc√®s frontend
    console.log('\nüåê Test d\'acc√®s frontend (avec cl√© anonyme):');
    const supabaseAnon = createClient(supabaseUrl, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!);
    
    const { data: frontendData, error: frontendError } = await supabaseAnon
      .from('holerites')
      .select('*')
      .eq('user_id', testUserId)
      .limit(1);

    if (frontendError) {
      console.log('‚ùå Erreur d\'acc√®s frontend:', frontendError.message);
      console.log('üí° Probl√®me de RLS - v√©rifiez les politiques de s√©curit√©');
    } else if (!frontendData || frontendData.length === 0) {
      console.log('‚ö†Ô∏è Aucune donn√©e accessible depuis le frontend');
      console.log('üí° Les politiques RLS bloquent l\'acc√®s');
    } else {
      console.log('‚úÖ Donn√©es accessibles depuis le frontend');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Ex√©cuter le test
testDashboardDisplay().catch(console.error); 