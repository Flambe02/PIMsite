/**
 * Script de correction de la synchronisation des donn√©es du holerite
 * R√©sout les probl√®mes de coh√©rence entre scan_results et holerites
 */

import { createClient } from '@/lib/supabase/client';

async function fixHoleriteDataSync() {
  console.log('üîß CORRECTION DE LA SYNCHRONISATION DES DONN√âES HOLERITE\n');
  
  const supabase = createClient();
  
  // 1. Analyser les donn√©es existantes
  console.log('üìä 1. ANALYSE DES DONN√âES EXISTANTES');
  console.log('=====================================');
  
  try {
    // R√©cup√©rer les scan_results r√©cents
    const { data: scanResults, error: scanError } = await supabase
      .from('scan_results')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (scanError) {
      console.log('‚ùå Erreur r√©cup√©ration scan_results:', scanError);
      return;
    }
    
    console.log(`üìà Scan results trouv√©s: ${scanResults?.length || 0}`);
    
    // R√©cup√©rer les holerites r√©cents
    const { data: holerites, error: holeriteError } = await supabase
      .from('holerites')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (holeriteError) {
      console.log('‚ùå Erreur r√©cup√©ration holerites:', holeriteError);
      return;
    }
    
    console.log(`üìà Holerites trouv√©s: ${holerites?.length || 0}`);
    
    // 2. Synchroniser les donn√©es manquantes
    console.log('\nüîÑ 2. SYNCHRONISATION DES DONN√âES MANQUANTES');
    console.log('=============================================');
    
    if (scanResults && scanResults.length > 0) {
      for (const scan of scanResults) {
        console.log(`\nüîç Traitement du scan ${scan.id} (${scan.file_name})`);
        
        // V√©rifier si un holerite correspondant existe
        const existingHolerite = holerites?.find(h => 
          h.user_id === scan.user_id && 
          Math.abs(new Date(h.created_at).getTime() - new Date(scan.created_at).getTime()) < 300000 // 5 minutes
        );
        
        if (!existingHolerite) {
          console.log('‚ö†Ô∏è Aucun holerite correspondant trouv√©, cr√©ation...');
          
          // Extraire les donn√©es du scan_results
          const scanData = scan.structured_data;
          const recommendations = scan.recommendations;
          
          if (scanData) {
            // Cr√©er un holerite avec la structure unifi√©e
            const holeriteData = {
              user_id: scan.user_id,
              structured_data: {
                // Structure unifi√©e compatible avec le dashboard
                final_data: {
                  employee_name: scanData.employee_name || scanData.Identifica√ß√£o?.employee_name,
                  company_name: scanData.company_name || scanData.Identifica√ß√£o?.company_name,
                  position: scanData.position || scanData.Identifica√ß√£o?.position,
                  statut: scanData.profile_type || scanData.Identifica√ß√£o?.profile_type,
                  salario_bruto: scanData.gross_salary || scanData.Sal√°rios?.gross_salary,
                  salario_liquido: scanData.net_salary || scanData.Sal√°rios?.net_salary,
                  descontos: scanData.total_deductions || 0,
                  period: scanData.period || ''
                },
                recommendations: recommendations || {
                  recommendations: [],
                  resume_situation: '',
                  score_optimisation: 0
                },
                analysis_result: {
                  finalData: {
                    employee_name: scanData.employee_name || scanData.Identifica√ß√£o?.employee_name,
                    company_name: scanData.company_name || scanData.Identifica√ß√£o?.company_name,
                    position: scanData.position || scanData.Identifica√ß√£o?.position,
                    statut: scanData.profile_type || scanData.Identifica√ß√£o?.profile_type,
                    salario_bruto: scanData.gross_salary || scanData.Sal√°rios?.gross_salary,
                    salario_liquido: scanData.net_salary || scanData.Sal√°rios?.net_salary,
                    descontos: scanData.total_deductions || 0,
                    period: scanData.period || ''
                  },
                  validation: {
                    confidence: scan.confidence_score || 0.8,
                    warnings: []
                  }
                },
                // Donn√©es originales du scan pour compatibilit√©
                employee_name: scanData.employee_name || scanData.Identifica√ß√£o?.employee_name,
                company_name: scanData.company_name || scanData.Identifica√ß√£o?.company_name,
                position: scanData.position || scanData.Identifica√ß√£o?.position,
                profile_type: scanData.profile_type || scanData.Identifica√ß√£o?.profile_type,
                gross_salary: scanData.gross_salary || scanData.Sal√°rios?.gross_salary,
                net_salary: scanData.net_salary || scanData.Sal√°rios?.net_salary,
                period: scanData.period || ''
              },
              nome: scanData.employee_name || scanData.Identifica√ß√£o?.employee_name || '',
              empresa: scanData.company_name || scanData.Identifica√ß√£o?.company_name || '',
              perfil: scanData.profile_type || scanData.Identifica√ß√£o?.profile_type || '',
              salario_bruto: scanData.gross_salary || scanData.Sal√°rios?.gross_salary || 0,
              salario_liquido: scanData.net_salary || scanData.Sal√°rios?.net_salary || 0,
              created_at: scan.created_at
            };
            
            // Ins√©rer le holerite
            const { data: newHolerite, error: insertError } = await supabase
              .from('holerites')
              .insert(holeriteData)
              .select('id')
              .single();
            
            if (insertError) {
              console.log('‚ùå Erreur insertion holerite:', insertError);
            } else {
              console.log('‚úÖ Holerite cr√©√© avec succ√®s, ID:', newHolerite.id);
            }
          } else {
            console.log('‚ö†Ô∏è Aucune donn√©e structur√©e dans le scan');
          }
        } else {
          console.log('‚úÖ Holerite correspondant d√©j√† existant');
        }
      }
    }
    
    // 3. Corriger les donn√©es existantes
    console.log('\nüîß 3. CORRECTION DES DONN√âES EXISTANTES');
    console.log('=========================================');
    
    if (holerites && holerites.length > 0) {
      for (const holerite of holerites) {
        console.log(`\nüîç V√©rification du holerite ${holerite.id}`);
        
        const structuredData = holerite.structured_data;
        let needsUpdate = false;
        let updatedData = { ...structuredData };
        
        // V√©rifier et corriger la structure
        if (!updatedData.final_data && (updatedData.employee_name || updatedData.company_name)) {
          console.log('‚ö†Ô∏è Structure final_data manquante, correction...');
          updatedData.final_data = {
            employee_name: updatedData.employee_name || holerite.nome,
            company_name: updatedData.company_name || holerite.empresa,
            position: updatedData.position || '',
            statut: updatedData.profile_type || holerite.perfil,
            salario_bruto: updatedData.gross_salary || holerite.salario_bruto,
            salario_liquido: updatedData.net_salary || holerite.salario_liquido,
            descontos: updatedData.total_deductions || (holerite.salario_bruto - holerite.salario_liquido),
            period: updatedData.period || ''
          };
          needsUpdate = true;
        }
        
        if (!updatedData.recommendations) {
          console.log('‚ö†Ô∏è Recommendations manquantes, ajout...');
          updatedData.recommendations = {
            recommendations: [],
            resume_situation: '',
            score_optimisation: 0
          };
          needsUpdate = true;
        }
        
        if (!updatedData.analysis_result) {
          console.log('‚ö†Ô∏è Analysis_result manquant, ajout...');
          updatedData.analysis_result = {
            finalData: updatedData.final_data || {
              employee_name: holerite.nome,
              company_name: holerite.empresa,
              position: '',
              statut: holerite.perfil,
              salario_bruto: holerite.salario_bruto,
              salario_liquido: holerite.salario_liquido,
              descontos: holerite.salario_bruto - holerite.salario_liquido,
              period: ''
            },
            validation: {
              confidence: 0.8,
              warnings: []
            }
          };
          needsUpdate = true;
        }
        
        // Mettre √† jour si n√©cessaire
        if (needsUpdate) {
          const { error: updateError } = await supabase
            .from('holerites')
            .update({
              structured_data: updatedData
            })
            .eq('id', holerite.id);
          
          if (updateError) {
            console.log('‚ùå Erreur mise √† jour:', updateError);
          } else {
            console.log('‚úÖ Holerite mis √† jour avec succ√®s');
          }
        } else {
          console.log('‚úÖ Structure d√©j√† correcte');
        }
      }
    }
    
    // 4. Nettoyer les donn√©es de test
    console.log('\nüßπ 4. NETTOYAGE DES DONN√âES DE TEST');
    console.log('=====================================');
    
    // Supprimer les donn√©es de test
    const { error: deleteTestError } = await supabase
      .from('holerites')
      .delete()
      .eq('user_id', 'test-audit-user');
    
    if (deleteTestError) {
      console.log('‚ùå Erreur nettoyage donn√©es test:', deleteTestError);
    } else {
      console.log('‚úÖ Donn√©es de test nettoy√©es');
    }
    
    // 5. V√©rification finale
    console.log('\n‚úÖ 5. V√âRIFICATION FINALE');
    console.log('==========================');
    
    const { data: finalHolerites, error: finalError } = await supabase
      .from('holerites')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (finalError) {
      console.log('‚ùå Erreur v√©rification finale:', finalError);
    } else {
      console.log(`üìä ${finalHolerites?.length || 0} holerites disponibles`);
      
      if (finalHolerites && finalHolerites.length > 0) {
        console.log('\nüìã Structure du dernier holerite:');
        const last = finalHolerites[0];
        console.log('- ID:', last.id);
        console.log('- Nom:', last.nome);
        console.log('- Entreprise:', last.empresa);
        console.log('- Sal√°rio Bruto:', last.salario_bruto);
        console.log('- Sal√°rio L√≠quido:', last.salario_liquido);
        
        if (last.structured_data) {
          console.log('- final_data pr√©sent:', !!last.structured_data.final_data);
          console.log('- recommendations pr√©sent:', !!last.structured_data.recommendations);
          console.log('- analysis_result pr√©sent:', !!last.structured_data.analysis_result);
        }
      }
    }
    
    console.log('\nüéØ CORRECTION TERMIN√âE AVEC SUCC√àS');
    console.log('====================================');
    console.log('‚úÖ Les donn√©es sont maintenant synchronis√©es');
    console.log('‚úÖ La structure est unifi√©e');
    console.log('‚úÖ Le dashboard devrait afficher les bonnes donn√©es');
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter la correction
fixHoleriteDataSync().catch(console.error); 