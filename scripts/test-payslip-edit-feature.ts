/**
 * Script de test pour la fonctionnalit√© d'√©dition des donn√©es de payslip
 * Teste le modal d'√©dition, la sauvegarde et la r√©analyse IA
 */

import { payslipEditService } from '../lib/services/payslipEditService';

// Donn√©es de test
const mockPayslipId = 'test-payslip-id-123';
const mockUserId = 'test-user-id-456';

const mockEditedData = {
  employee_name: 'Jo√£o Silva',
  company_name: 'TechCorp Brasil',
  position: 'Desenvolvedor Senior',
  period: 'Janeiro/2024',
  salary_bruto: 8500.00,
  salary_liquido: 6500.00,
  statut: 'CLT',
  impostos: [
    { nome: 'INSS', valor: 850.00 },
    { nome: 'IRRF', valor: 1200.00 }
  ],
  descontos: 2050.00
};

const mockCustomFields = [
  {
    id: '1',
    title: 'Vale Refei√ß√£o',
    value: 'R$ 600,00'
  },
  {
    id: '2',
    title: 'Plano de Sa√∫de',
    value: 'R$ 200,00'
  }
];

async function testPayslipEditFeature() {
  console.log('üß™ Test de la fonctionnalit√© d\'√©dition des donn√©es de payslip');
  console.log('=' .repeat(60));

  try {
    // Test 1: Sauvegarde des donn√©es √©dit√©es
    console.log('\nüìù Test 1: Sauvegarde des donn√©es √©dit√©es');
    console.log('-'.repeat(40));
    
    const savedData = await payslipEditService.saveEditedPayslip(
      mockPayslipId,
      mockEditedData,
      mockCustomFields,
      mockUserId
    );
    
    console.log('‚úÖ Sauvegarde r√©ussie:', {
      id: savedData.id,
      is_manual: savedData.is_manual,
      has_manual_overrides: !!savedData.manual_overrides,
      updated_at: savedData.updated_at
    });

    // Test 2: V√©rification que le payslip est marqu√© comme √©dit√© manuellement
    console.log('\nüîç Test 2: V√©rification du statut d\'√©dition manuelle');
    console.log('-'.repeat(40));
    
    const isManuallyEdited = await payslipEditService.isPayslipManuallyEdited(mockPayslipId);
    console.log('‚úÖ Payslip marqu√© comme √©dit√© manuellement:', isManuallyEdited);

    // Test 3: R√©cup√©ration des donn√©es √©dit√©es
    console.log('\nüìñ Test 3: R√©cup√©ration des donn√©es √©dit√©es');
    console.log('-'.repeat(40));
    
    const retrievedData = await payslipEditService.getEditedPayslip(mockPayslipId);
    if (retrievedData) {
      console.log('‚úÖ Donn√©es r√©cup√©r√©es:', {
        structured_data: retrievedData.structured_data,
        manual_overrides: retrievedData.manual_overrides,
        is_manual: retrievedData.is_manual
      });
    } else {
      console.log('‚ùå Impossible de r√©cup√©rer les donn√©es');
    }

    // Test 4: V√©rification de la structure des donn√©es sauvegard√©es
    console.log('\nüèóÔ∏è Test 4: V√©rification de la structure des donn√©es');
    console.log('-'.repeat(40));
    
    if (retrievedData?.manual_overrides) {
      const overrides = retrievedData.manual_overrides;
      console.log('‚úÖ Structure des manual_overrides:', {
        has_edited_fields: !!overrides.edited_fields,
        has_custom_fields: !!overrides.custom_fields,
        has_edited_at: !!overrides.edited_at,
        has_edited_by: !!overrides.edited_by,
        custom_fields_count: overrides.custom_fields?.length || 0
      });
      
      // V√©rification des champs personnalis√©s
      if (overrides.custom_fields) {
        console.log('üìã Champs personnalis√©s sauvegard√©s:');
        overrides.custom_fields.forEach((field: any, index: number) => {
          console.log(`  ${index + 1}. ${field.title}: ${field.value}`);
        });
      }
    }

    // Test 5: V√©rification des modifications de p√©riode
    console.log('\nüìÖ Test 5: V√©rification des modifications de p√©riode');
    console.log('-'.repeat(40));
    
    if (retrievedData?.structured_data) {
      const period = retrievedData.structured_data.period || retrievedData.structured_data.periodo;
      console.log('‚úÖ P√©riode sauvegard√©e:', period);
      
      // V√©rification que la p√©riode est au bon format
      if (period && typeof period === 'string' && period.includes('/')) {
        console.log('‚úÖ Format de p√©riode correct');
      } else {
        console.log('‚ö†Ô∏è Format de p√©riode incorrect:', period);
      }
    }

    // Test 6: V√©rification de la suppression des champs benefits/insurance
    console.log('\nüóëÔ∏è Test 6: V√©rification de la suppression des champs benefits/insurance');
    console.log('-'.repeat(40));
    
    if (retrievedData?.structured_data) {
      const hasBenefits = !!retrievedData.structured_data.beneficios;
      const hasInsurance = !!retrievedData.structured_data.seguros;
      
      console.log('‚úÖ Champs benefits pr√©sents:', hasBenefits);
      console.log('‚úÖ Champs insurance pr√©sents:', hasInsurance);
      
      if (!hasBenefits && !hasInsurance) {
        console.log('‚úÖ Suppression des champs benefits et insurance confirm√©e');
      } else {
        console.log('‚ö†Ô∏è Les champs benefits ou insurance sont encore pr√©sents');
      }
    }

    console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s !');
    console.log('=' .repeat(60));

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
    console.log('=' .repeat(60));
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  testPayslipEditFeature();
}

export { testPayslipEditFeature }; 