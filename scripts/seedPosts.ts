import 'dotenv/config';
import { createClient } from '@sanity/client';
import { descontosFolhaPagamento } from '../seeds/posts/descontos-folha-pagamento';
import { inssImpactoSalario } from '../seeds/posts/inss-impacto-salario';
import { irrfImpostoRendaHolerite } from '../seeds/posts/irrf-imposto-renda-holerite';
import { beneficiosCorporativosHolerite } from '../seeds/posts/beneficios-corporativos-holerite';
import { cltPjEstagioFolhaPagamento } from '../seeds/posts/clt-pj-estagio-folha-pagamento';

// Configuration Sanity
const sanityClient = createClient({
  projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID!,
  dataset: process.env.NEXT_PUBLIC_SANITY_DATASET || 'production',
  apiVersion: '2024-07-29',
  useCdn: false,
  token: process.env.SANITY_API_TOKEN, // Token avec permissions d'√©criture
});

console.log('üöÄ Script de cr√©ation des articles de blog');
console.log('==========================================\n');

// Tous les articles √† ins√©rer
const articles = [
  descontosFolhaPagamento,
  inssImpactoSalario,
  irrfImpostoRendaHolerite,
  beneficiosCorporativosHolerite,
  cltPjEstagioFolhaPagamento
];

async function seedPosts() {
  try {
    console.log(`üìù Pr√©paration de l'insertion de ${articles.length} articles...\n`);

    let successCount = 0;
    let errorCount = 0;

    for (const article of articles) {
      console.log(`üìÑ Insertion de l'article: ${article.title}`);
      
      try {
        // V√©rifier si l'article existe d√©j√†
        const existingArticle = await sanityClient.fetch(
          `*[_type == "post" && slug.current == $slug][0]`,
          { slug: article.slug }
        );

        if (existingArticle) {
          console.log(`üîÑ Article existant trouv√©, mise √† jour...`);
          
          // Mise √† jour de l'article existant
          const updatedArticle = await sanityClient
            .patch(existingArticle._id)
            .set({
              title: article.title,
              excerpt: article.excerpt,
              country: article.country,
              language: article.language,
              publishedAt: article.publishedAt,
              metaTitle: article.metaTitle,
              metaDescription: article.metaDescription,
              tags: article.tags,
              body: article.body
            })
            .commit();

          console.log(`‚úÖ Article mis √† jour: ${updatedArticle.title}`);
        } else {
          console.log(`‚ûï Cr√©ation d'un nouvel article...`);
          
          // Cr√©ation d'un nouvel article
          const newArticle = await sanityClient.create({
            _type: 'post',
            title: article.title,
            slug: {
              _type: 'slug',
              current: article.slug
            },
            excerpt: article.excerpt,
            country: article.country,
            language: article.language,
            publishedAt: article.publishedAt,
            metaTitle: article.metaTitle,
            metaDescription: article.metaDescription,
            tags: article.tags,
            body: article.body
          });

          console.log(`‚úÖ Article cr√©√©: ${newArticle.title}`);
        }

        successCount++;
        
      } catch (error) {
        console.error(`‚ùå Erreur lors de l'insertion de "${article.title}":`, error);
        errorCount++;
      }

      console.log(''); // Ligne vide pour s√©parer les articles
    }

    console.log('==========================================');
    console.log('üìä R√©sum√©:');
    console.log(`‚úÖ Articles ins√©r√©s/mis √† jour: ${successCount}`);
    console.log(`‚ùå Erreurs: ${errorCount}`);
    
    if (errorCount > 0) {
      console.log(`‚ö†Ô∏è Certains articles n'ont pas pu √™tre ins√©r√©s. V√©rifiez les erreurs ci-dessus.`);
    } else {
      console.log(`üéâ Tous les articles ont √©t√© ins√©r√©s avec succ√®s !`);
    }

    console.log('\nüîó URLs de test:');
    console.log(`üìö Blog: http://localhost:3001/br/blog`);
    articles.forEach(article => {
      console.log(`üìÑ ${article.title}: http://localhost:3001/br/blog/${article.slug}`);
    });

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// V√©rification des variables d'environnement
if (!process.env.NEXT_PUBLIC_SANITY_PROJECT_ID) {
  console.error('‚ùå NEXT_PUBLIC_SANITY_PROJECT_ID non d√©fini');
  console.log('üí° Veuillez d√©finir vos variables d\'environnement Sanity');
  process.exit(1);
}

if (!process.env.SANITY_API_TOKEN) {
  console.error('‚ùå SANITY_API_TOKEN non d√©fini');
  console.log('üí° Veuillez d√©finir votre token API Sanity avec permissions d\'√©criture');
  process.exit(1);
}

// Ex√©cution du script
seedPosts(); 