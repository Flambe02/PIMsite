#!/usr/bin/env tsx

import { PayslipAnalysisService } from '../lib/ia/payslipAnalysisService';
import { OCRLearningServiceClient } from '../lib/learning/ocrLearningServiceClient';

/**
 * Script de test pour le processus de scan optimis√©
 */
async function testOptimizedProcess() {
  console.log('üß™ Test du processus de scan optimis√©...\n');

  try {
    // 1. Test du service d'analyse IA
    console.log('1Ô∏è‚É£ Test du service d\'analyse IA...');
    const analysisService = new PayslipAnalysisService();
    
    const testOCRText = `
    EMPREGADOR
    Recibo de Pagamento de Sal√°rio
    Nome: Jo√£o Silva
    Referente ao M√™s: Janeiro/2022
    Fun√ß√£o: Desenvolvedor
    
    Sal√°rio Bruto: R$ 7.089,84
    Descontos: R$ 1.980,93
    Sal√°rio L√≠quido: R$ 5.108,91
    
    Benef√≠cios: R$ 0,00
    Seguros: R$ 300,00
    `;

    const analysisResult = await analysisService.analyzePayslip(testOCRText, 'br');
    console.log('‚úÖ Analyse IA r√©ussie:', {
      extraction: analysisResult.extraction,
      validation: analysisResult.validation,
      recommendations: analysisResult.recommendations
    });

    // 2. Test du service d'apprentissage
    console.log('\n2Ô∏è‚É£ Test du service d\'apprentissage...');
    
    const learningData = {
      user_id: 'test-user-id',
      country: 'br',
      statut: 'CLT',
      raw_ocr_text: testOCRText,
      extracted_data: analysisResult.finalData,
      validation_result: analysisResult.validation,
      confidence_score: analysisResult.validation.confidence,
      validated: analysisResult.validation.isValid
    };

    try {
      const learningId = await OCRLearningServiceClient.storeLearningData(learningData);
      console.log('‚úÖ Stockage d\'apprentissage r√©ussi:', learningId);
    } catch (learningError) {
      console.log('‚ö†Ô∏è Erreur d\'apprentissage (non bloquant):', learningError);
    }

    // 3. Test de g√©n√©ration d'insights
    console.log('\n3Ô∏è‚É£ Test de g√©n√©ration d\'insights...');
    try {
      const insights = await OCRLearningServiceClient.generateLearningInsights('br', 'CLT');
      console.log('‚úÖ Insights g√©n√©r√©s:', insights);
    } catch (insightsError) {
      console.log('‚ö†Ô∏è Erreur d\'insights (non bloquant):', insightsError);
    }

    // 4. Test de statistiques d'apprentissage
    console.log('\n4Ô∏è‚É£ Test de statistiques d\'apprentissage...');
    try {
      const stats = await OCRLearningServiceClient.getLearningStats();
      console.log('‚úÖ Statistiques r√©cup√©r√©es:', stats);
    } catch (statsError) {
      console.log('‚ö†Ô∏è Erreur de statistiques (non bloquant):', statsError);
    }

    console.log('\nüéâ Tous les tests du processus optimis√© sont termin√©s !');

  } catch (error) {
    console.error('‚ùå Erreur dans le test du processus optimis√©:', error);
  }
}

// Ex√©cution du test
if (require.main === module) {
  testOptimizedProcess();
}

export { testOptimizedProcess }; 